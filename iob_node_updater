#!/bin/bash
# iobroker node-update
# written to help updating and fixing nodejs on linux (deb + rpm based Distros)
VERSION="2023-09-05"
echo -e "ioBroker node-update v$VERSION is starting. Please be patient!";
NODE_MAJOR=18           #recommended major nodejs version for ioBroker, please adjust if the recommendation changes
DOCKER=/opt/scripts/.docker_config/.thisisdocker
HOST=$(hostname)
NODERECOM=$(iobroker state getValue system.host."$HOST".versions.nodeNewestNext);  #recommended node version
NODEINSTMAJOR=$(nodejs -v | cut -d.  -f1 | cut -c 2-3);
export LC_ALL=C;
SYSTDDVIRT=$(systemd-detect-virt 2>/dev/null)
# ------------------------------
# functions for ioBroker node-update
# ------------------------------


        # Test which platform this script is being run on
        # When adding another supported platform, also add detection for the install command
        # HOST_PLATFORM:  Name of the platform
        # INSTALL_CMD:      comand for package installation
        # INSTALL_CMD_ARGS: arguments for $INSTALL_CMD to install something
        # INSTALL_CMD_UPD_ARGS: arguments for $INSTALL_CMD to update something
        # IOB_DIR:        Directory where iobroker should be installed
        # IOB_USER:       The user to run ioBroker as

        unamestr=$(uname)
        case "$unamestr" in
        "Linux")
                HOST_PLATFORM="linux"
                INSTALL_CMD="apt-get"
                INSTALL_CMD_ARGS="install -yq"
                if [[ $(which "yum" 2>/dev/null) == *"/yum" ]]; then
                        INSTALL_CMD="yum"
                        # The args -y and -q have to be separate
                        INSTALL_CMD_ARGS="install -q -y"
                fi
                IOB_DIR="/opt/iobroker"
                IOB_USER="iobroker"
                ;;
        "Darwin")
                # OSX and Linux are the same in terms of install procedure
                HOST_PLATFORM="osx"
                ROOT_GROUP="wheel"
                INSTALL_CMD="brew"
                INSTALL_CMD_ARGS="install"
                IOB_DIR="/usr/local/iobroker"
                IOB_USER="$USER"
                ;;
        "FreeBSD")
                HOST_PLATFORM="freebsd"
                ROOT_GROUP="wheel"
                INSTALL_CMD="pkg"
                INSTALL_CMD_ARGS="install -yq"
                IOB_DIR="/opt/iobroker"
                IOB_USER="iobroker"
                ;;
        *)
                # The following should never happen, but better be safe than sorry
                echo "Unsupported platform $unamestr"
                exit 1
                ;;
        esac

        if [[ $EUID -eq 0 ]];
        then IS_ROOT=true;  SUDOX=""
        else IS_ROOT=false; SUDOX="sudo "
        ROOT_GROUP="root"
        USER_GROUP="$USER"
        fi


if [ -f "$DOCKER" ];
then
        echo "Fixing Docker is not supported, please update your Docker Container";
#       elif [ "$(id -u)" -eq 0 ];
#                then
#                        echo -e "This script must not be run as root! \nPlease use your standard user!"
        exit 1;
fi;
clear;
echo -e "ioBroker nodejs fixer $VERSION";

if [[ -n "$NODERECOM" ]];
        then
        echo -e "\nRecommended nodejs-version is: $NODERECOM";
        echo "Checking your installation now. Please be patient!"
        else
        NODERECOMNF=1;
        echo -e "Could not detect recommended nodejs-version. Setting up the nodejs $NODE_MAJOR tree now.";
fi;
echo "";
echo "Your current setup is:";
if [[ -f /usr/bin/nodejs ]];
then
echo -e "$(type -p nodejs) \t$(nodejs -v)";
fi;
echo -e "$(type -p node) \t\t$(node -v)";
echo -e "$(type -p npm) \t\t$(npm -v)";
echo -e "$(type -p npx) \t\t$(npx -v)";
if [[ -f /usr/bin/corepack ]]
then
echo -e "$(type -p corepack) \t$(corepack -v)";
fi;
PATHNODEJS=$(type -p nodejs);
PATHNODE=$(type -p node);
PATHNPM=$(type -p npm);
PATHNPX=$(type -p npx);
if [[ -f /usr/bin/corepack ]]; then
PATHCOREPACK=$(type -p corepack);
fi;
if [[ -f /usr/bin/nodejs ]]; then
VERNODEJS=$(nodejs -v);
fi;
VERNODE=$(node -v);
VERNPM=$(npm -v);
VERNPX=$(npx -v);
NOTCORRSTRG="\n\033[0;31m*** nodejs is NOT correctly installed ***\033[0m"
if
        [[ -f /usr/bin/nodejs && "$PATHNODEJS" != "/usr/bin/nodejs" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ "$PATHNODE" != "/usr/bin/node" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ "$PATHNPM" != "/usr/bin/npm" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ "$PATHNPX" != "/usr/bin/npx" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ -f /usr/bin/nodejs && "$VERNODEJS" != "$VERNODE" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ "$VERNPM" != "$VERNPX" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
        elif
        [[ -f /usr/bin/corepack && "$PATHCOREPACK" != "/usr/bin/corepack" ]];
        then
                NODENOTCORR=1
                echo -e "$NOTCORRSTRG";
else
                echo -e "\n\n";
fi
echo "";
echo "I found these versions available for installation:";
echo "";
        apt-cache policy nodejs;
echo "";

# DETECTING WRONG PATHS
if
        [[ "$NODENOTCORR" -eq 1 ]]
        then
                echo -e "\n!!! THIS CODE IS IN BETA STAGE. TRY IT AT YOUR OWN RISK !!!";
                echo -e "\n\nYour nodejs-Installation seems to be not correct. Shall we try to fix it?  \nDO NOT RUN FIX ON NON-LINUX-SYSTEMS!";
                echo "Press <y> to continue or any other key to quit";
                read -r -s -n 1 charpaths;
        if
                        [ "$charpaths" = "y" ]
                then
                        echo -e "\nFixing your nodejs setup";
                if
                                [[ -f /usr/bin/nodejs && "$PATHNODEJS" != "/usr/bin/nodejs" ]];
                        then
                                echo "*** Deleting $PATHNODEJS ***";
                                $SUDOX rm "$(type -p nodejs)";
                fi
                if
                                [[ "$PATHNODE" != "/usr/bin/node" ]];
                        then
                                echo -e "*** Deleting $PATHNODE ***";
                                $SUDOX rm "$(type -p node)";
                fi
                if
                                [[ "$PATHNPM" != "/usr/bin/npm" ]];
                        then
                                echo -e "*** Deleting $PATHNPM ***";
                                $SUDOX rm "$(type -p npm)";
                fi
                if
                                [[ "$PATHNPX" != "/usr/bin/npx" ]];
                        then
                                echo -e "*** Deleting $PATHNPX ***";
                                $SUDOX rm "$(type -p npx)";
                fi
                if
                        [[ -f /usr/bin/corepack && "$PATHCOREPACK" != "/usr/bin/corepack" ]];
                        then
                                echo -e "*** Deleting $PATHCOREPACK ***";
                                $SUDOX rm "$(type -p corepack)";
                fi
                echo -e "\nWrong paths have been fixed. Run 'iob diag' or 'iob node-update' again to check if your installation is fine now";
        fi
                else
        echo -e "\n\nNothing to do, your installation is using the correct paths.";
fi;

if
        [[ "$INSTALL_CMD" != "apt-get" ]];
then
        echo "Non-Debian-based Systems are not supported yet, exiting";
        unset LC_ALL;
        exit;
fi;

if [[ "$VERNODE" = "v$NODERECOM" ]];
then
echo "Nothing to do, your installed version is the recommended one.";
exit;
fi;
if [[ "$VERNODE" != "v$NODERECOM" ]];
then
        echo -e "\n!!! THIS CODE IS IN BETA STAGE. TRY IT AT YOUR OWN RISK !!!";
        echo -e "\nYou are running nodejs $VERNODE. Do you want to install recommended nodejs $NODERECOM? ";
        echo -e "\nPress <y> to continue or any other key to quit";
        read -r -s -n 1 char;
        if
                [ "$char" = "y" ]
        then
                echo "Trying to fix your installation now. Please be patient."
                $SUDOX rm "$($SUDOX find / -path /proc -prune -o -name nodesource.gpg -print)";
                $SUDOX rm "$($SUDOX find / -path /proc -prune -o -name nodesource.key -print)";
                $SUDOX rm /etc/apt/sources.list.d/nodesource.lis*;
        else 
        echo "I'm not fixing your installation. Exiting.";
        exit 1;
        fi;
                        if [ "$SYSTDDVIRT" != "none" ]; then
                                echo "$SYSTDDVIRT";
                                #sudo pkill -u iobroker;    #FIX ME! How to shut down iob in LXC without killing the script?
                                                            #Using 'iob stop' in the meantime.
                                iob stop;
                        else
                                iob stop;
                        fi;

                echo "Waiting for ioBroker to shut down - Give me a minute..."
                BAR='############################################################'   # this is full bar, e.g. 60 chars
                for i in {1..60}; do
                        echo -ne "\r${BAR:0:$i}" # print $i chars of $BAR from 0 position
                        sleep 1                 # wait 1s between "frames"
                done;
                echo "";
                        $SUDOX "$INSTALL_CMD" update;
                        $SUDOX "$INSTALL_CMD" install ca-certificates curl gnupg;
                        $SUDOX mkdir -p /etc/apt/keyrings;
                        curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | $SUDOX gpg --dearmor --yes -o /etc/apt/keyrings/nodesource.gpg;
                        echo -e "***\nCreating new /etc/apt/sources.list.d/nodesource.list file with this content:"
                        echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_${NODE_MAJOR}.x nodistro main" | $SUDOX tee /etc/apt/sources.list.d/nodesource.list;
                        echo "***";
                        $SUDOX "$INSTALL_CMD" update;
                        if [[ $NODEINSTMAJOR -gt $NODE_MAJOR ]]
                                then
                                $SUDOX "$INSTALL_CMD" install --reinstall --allow-downgrades -y nodejs="$NODERECOM"-1nodesource1 ;
                                elif
                                [[ "$NODERECOMNF" -eq 1 ]]
                                then
                                #Falling back to initial release of nodejs recommended tree
                                #NOT WORKING DUE TO TROUBLE WITH NODESOURCE REPO, TRY AGAIN LATER
                                #NODERECOM=$NODE_MAJOR.0.0
                                # Just another fallback for nodejs@18: 
                                NODERECOM=18.17.0
                                $SUDOX "$INSTALL_CMD" install --reinstall --allow-downgrades -y nodejs="$NODERECOM"-1nodesource1 ;
                                $SUDOX "$INSTALL_CMD" update;
                                $SUDOX "$INSTALL_CMD" upgrade nodejs -y;
                                fi;
                                elif
                                [[ $NODERECOM = "$VERNODE" ]] ; then 
                                echo "Nothing to do, you are running the recommended version";
                                echo "nodejs will now be updated using the usual 'apt update && apt full-upgrade' commands."
                                fi;
                                #else;
                                $SUDOX "$INSTALL_CMD" install --reinstall nodejs;
                                #fi;
                        #fi;
                if [ "$SYSTDDVIRT" != "none" ]; then
                        echo -e "\n*** You need to manually restart your container now! *** ";
                        echo -e "\nWe tried our best to fix your nodejs. Please run 'iob diag' again to verify.";
                        unset LC_ALL;
                        exit;
                else
                        iob restart;
                        echo -e "\nWe tried our best to fix your nodejs. Please run 'iob diag' again to verify.";
                        echo -e "\n*** RESTARTING ioBroker NOW! *** \n Please refresh or restart your browser in a few moments.";
                fi;
        # else
                echo "";
        #fi;
        if [[ -f "/var/run/reboot-required" ]];
        then
        echo "";
        echo "This system needs to be REBOOTED NOW!";
        echo "";
        fi;
        unset LC_ALL;
exit;
